// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoreV2FileHistory File history.
// swagger:model core.v2.FileHistory
type CoreV2FileHistory struct {

	// ISO 8601 timestamp when the resource was changed.
	// Format: date-time
	Changed strfmt.DateTime `json:"changed,omitempty"`

	// Type of change.
	Type int64 `json:"type,omitempty"`

	// user
	User *CoreV2FileHistoryUser `json:"user,omitempty"`

	// The version number.
	Version *int64 `json:"version,omitempty"`
}

// Validate validates this core v2 file history
func (m *CoreV2FileHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoreV2FileHistory) validateChanged(formats strfmt.Registry) error {

	if swag.IsZero(m.Changed) { // not required
		return nil
	}

	if err := validate.FormatOf("changed", "body", "date-time", m.Changed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CoreV2FileHistory) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2FileHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2FileHistory) UnmarshalBinary(b []byte) error {
	var res CoreV2FileHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2FileHistoryUser Resolves to user who executed the operation.
// swagger:model CoreV2FileHistoryUser
type CoreV2FileHistoryUser struct {

	// The id of the share owner.
	ID string `json:"id,omitempty"`

	// The username of the share owner.
	Name string `json:"name,omitempty"`
}

// Validate validates this core v2 file history user
func (m *CoreV2FileHistoryUser) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2FileHistoryUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2FileHistoryUser) UnmarshalBinary(b []byte) error {
	var res CoreV2FileHistoryUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
