// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoreV2EventLog Event log entry. Each event represents an executed operation on the server.
// swagger:model core.v2.EventLog
type CoreV2EventLog struct {

	// client
	Client *CoreV2EventLogClient `json:"client,omitempty"`

	// The event id.
	Event string `json:"event,omitempty"`

	// node
	Node *CoreV2EventLogNode `json:"node,omitempty"`

	// The event operation.
	// Enum: [deleteCollectionReference deleteCollectionShare deleteCollection addCollection addFile addCollectionShare addCollectionReference undeleteFile undeleteCollectionReference undeleteCollectionShare restoreFile renameFile renameCollection renameCollectionShare renameCollectionReference copyFile copyCollection copyCollectionShare copyCollectionRFeference moveFile moveCollection moveCollectionReference moveCollectionShare]
	Operation string `json:"operation,omitempty"`

	// parent
	Parent *CoreV2EventLogParent `json:"parent,omitempty"`

	// share
	Share *CoreV2EventLogShare `json:"share,omitempty"`

	// ISO 8601 timestamp when the event was created.
	Timestamp string `json:"timestamp,omitempty"`

	// user
	User *CoreV2EventLogUser `json:"user,omitempty"`
}

// Validate validates this core v2 event log
func (m *CoreV2EventLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoreV2EventLog) validateClient(formats strfmt.Registry) error {

	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *CoreV2EventLog) validateNode(formats strfmt.Registry) error {

	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

var coreV2EventLogTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deleteCollectionReference","deleteCollectionShare","deleteCollection","addCollection","addFile","addCollectionShare","addCollectionReference","undeleteFile","undeleteCollectionReference","undeleteCollectionShare","restoreFile","renameFile","renameCollection","renameCollectionShare","renameCollectionReference","copyFile","copyCollection","copyCollectionShare","copyCollectionRFeference","moveFile","moveCollection","moveCollectionReference","moveCollectionShare"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coreV2EventLogTypeOperationPropEnum = append(coreV2EventLogTypeOperationPropEnum, v)
	}
}

const (

	// CoreV2EventLogOperationDeleteCollectionReference captures enum value "deleteCollectionReference"
	CoreV2EventLogOperationDeleteCollectionReference string = "deleteCollectionReference"

	// CoreV2EventLogOperationDeleteCollectionShare captures enum value "deleteCollectionShare"
	CoreV2EventLogOperationDeleteCollectionShare string = "deleteCollectionShare"

	// CoreV2EventLogOperationDeleteCollection captures enum value "deleteCollection"
	CoreV2EventLogOperationDeleteCollection string = "deleteCollection"

	// CoreV2EventLogOperationAddCollection captures enum value "addCollection"
	CoreV2EventLogOperationAddCollection string = "addCollection"

	// CoreV2EventLogOperationAddFile captures enum value "addFile"
	CoreV2EventLogOperationAddFile string = "addFile"

	// CoreV2EventLogOperationAddCollectionShare captures enum value "addCollectionShare"
	CoreV2EventLogOperationAddCollectionShare string = "addCollectionShare"

	// CoreV2EventLogOperationAddCollectionReference captures enum value "addCollectionReference"
	CoreV2EventLogOperationAddCollectionReference string = "addCollectionReference"

	// CoreV2EventLogOperationUndeleteFile captures enum value "undeleteFile"
	CoreV2EventLogOperationUndeleteFile string = "undeleteFile"

	// CoreV2EventLogOperationUndeleteCollectionReference captures enum value "undeleteCollectionReference"
	CoreV2EventLogOperationUndeleteCollectionReference string = "undeleteCollectionReference"

	// CoreV2EventLogOperationUndeleteCollectionShare captures enum value "undeleteCollectionShare"
	CoreV2EventLogOperationUndeleteCollectionShare string = "undeleteCollectionShare"

	// CoreV2EventLogOperationRestoreFile captures enum value "restoreFile"
	CoreV2EventLogOperationRestoreFile string = "restoreFile"

	// CoreV2EventLogOperationRenameFile captures enum value "renameFile"
	CoreV2EventLogOperationRenameFile string = "renameFile"

	// CoreV2EventLogOperationRenameCollection captures enum value "renameCollection"
	CoreV2EventLogOperationRenameCollection string = "renameCollection"

	// CoreV2EventLogOperationRenameCollectionShare captures enum value "renameCollectionShare"
	CoreV2EventLogOperationRenameCollectionShare string = "renameCollectionShare"

	// CoreV2EventLogOperationRenameCollectionReference captures enum value "renameCollectionReference"
	CoreV2EventLogOperationRenameCollectionReference string = "renameCollectionReference"

	// CoreV2EventLogOperationCopyFile captures enum value "copyFile"
	CoreV2EventLogOperationCopyFile string = "copyFile"

	// CoreV2EventLogOperationCopyCollection captures enum value "copyCollection"
	CoreV2EventLogOperationCopyCollection string = "copyCollection"

	// CoreV2EventLogOperationCopyCollectionShare captures enum value "copyCollectionShare"
	CoreV2EventLogOperationCopyCollectionShare string = "copyCollectionShare"

	// CoreV2EventLogOperationCopyCollectionRFeference captures enum value "copyCollectionRFeference"
	CoreV2EventLogOperationCopyCollectionRFeference string = "copyCollectionRFeference"

	// CoreV2EventLogOperationMoveFile captures enum value "moveFile"
	CoreV2EventLogOperationMoveFile string = "moveFile"

	// CoreV2EventLogOperationMoveCollection captures enum value "moveCollection"
	CoreV2EventLogOperationMoveCollection string = "moveCollection"

	// CoreV2EventLogOperationMoveCollectionReference captures enum value "moveCollectionReference"
	CoreV2EventLogOperationMoveCollectionReference string = "moveCollectionReference"

	// CoreV2EventLogOperationMoveCollectionShare captures enum value "moveCollectionShare"
	CoreV2EventLogOperationMoveCollectionShare string = "moveCollectionShare"
)

// prop value enum
func (m *CoreV2EventLog) validateOperationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, coreV2EventLogTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CoreV2EventLog) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *CoreV2EventLog) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *CoreV2EventLog) validateShare(formats strfmt.Registry) error {

	if swag.IsZero(m.Share) { // not required
		return nil
	}

	if m.Share != nil {
		if err := m.Share.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("share")
			}
			return err
		}
	}

	return nil
}

func (m *CoreV2EventLog) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLog) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2EventLogClient Describes the client from which the operation was executed.
// swagger:model CoreV2EventLogClient
type CoreV2EventLogClient struct {

	// The client app name.
	App string `json:"app,omitempty"`

	// The hostname of the client.
	Hostname string `json:"hostname,omitempty"`

	// The type of the client.
	Type string `json:"type,omitempty"`

	// The version of the client app.
	V string `json:"v,omitempty"`
}

// Validate validates this core v2 event log client
func (m *CoreV2EventLogClient) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLogClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLogClient) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLogClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2EventLogNode Resolves to the node involved in the operation.
// swagger:model CoreV2EventLogNode
type CoreV2EventLogNode struct {

	// The id of the node
	ID string `json:"id,omitempty"`

	// The name of the node
	Name string `json:"name,omitempty"`
}

// Validate validates this core v2 event log node
func (m *CoreV2EventLogNode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLogNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLogNode) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLogNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2EventLogParent Points to the parent collection. If the node is in the root this is null.
// swagger:model CoreV2EventLogParent
type CoreV2EventLogParent struct {

	// The id of the parent collection
	ID string `json:"id,omitempty"`

	// The name of the parent collection
	Name string `json:"name,omitempty"`
}

// Validate validates this core v2 event log parent
func (m *CoreV2EventLogParent) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLogParent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLogParent) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLogParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2EventLogShare Points to the shared node (or share reference). If the node is not part of any share this is null.
// swagger:model CoreV2EventLogShare
type CoreV2EventLogShare struct {

	// The id of the share collection. If the share is a reference (incoming share) it will point to the share reference and not the id of the shared collection itself.
	ID string `json:"id,omitempty"`

	// The name of the share (or share reference).
	Name string `json:"name,omitempty"`
}

// Validate validates this core v2 event log share
func (m *CoreV2EventLogShare) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLogShare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLogShare) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLogShare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CoreV2EventLogUser Resolves to user who executed the operation.
// swagger:model CoreV2EventLogUser
type CoreV2EventLogUser struct {

	// The id of the share owner.
	ID string `json:"id,omitempty"`

	// The username of the share owner.
	Name string `json:"name,omitempty"`
}

// Validate validates this core v2 event log user
func (m *CoreV2EventLogUser) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2EventLogUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2EventLogUser) UnmarshalBinary(b []byte) error {
	var res CoreV2EventLogUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
