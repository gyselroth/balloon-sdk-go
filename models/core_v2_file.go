// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CoreV2File A collection can hold an unlimited number of child nodes.
// swagger:model core.v2.File
type CoreV2File struct {
	CoreV2Node

	// MD5 content checksum.
	Hash string `json:"hash,omitempty"`

	// Is true if there is a preview
	Preview bool `json:"preview,omitempty"`

	// The content version. Does increase if the content gets changed.
	Version *float64 `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CoreV2File) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CoreV2Node
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CoreV2Node = aO0

	// AO1
	var dataAO1 struct {
		Hash string `json:"hash,omitempty"`

		Preview bool `json:"preview,omitempty"`

		Version *float64 `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Hash = dataAO1.Hash

	m.Preview = dataAO1.Preview

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CoreV2File) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CoreV2Node)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Hash string `json:"hash,omitempty"`

		Preview bool `json:"preview,omitempty"`

		Version *float64 `json:"version,omitempty"`
	}

	dataAO1.Hash = m.Hash

	dataAO1.Preview = m.Preview

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this core v2 file
func (m *CoreV2File) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CoreV2Node
	if err := m.CoreV2Node.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CoreV2File) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoreV2File) UnmarshalBinary(b []byte) error {
	var res CoreV2File
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
