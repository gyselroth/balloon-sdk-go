// Code generated by go-swagger; DO NOT EDIT.

package ballon_app_elasticsearch_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryElasticsearchParams creates a new QueryElasticsearchParams object
// with the default values initialized.
func NewQueryElasticsearchParams() *QueryElasticsearchParams {
	var ()
	return &QueryElasticsearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryElasticsearchParamsWithTimeout creates a new QueryElasticsearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryElasticsearchParamsWithTimeout(timeout time.Duration) *QueryElasticsearchParams {
	var ()
	return &QueryElasticsearchParams{

		timeout: timeout,
	}
}

// NewQueryElasticsearchParamsWithContext creates a new QueryElasticsearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryElasticsearchParamsWithContext(ctx context.Context) *QueryElasticsearchParams {
	var ()
	return &QueryElasticsearchParams{

		Context: ctx,
	}
}

// NewQueryElasticsearchParamsWithHTTPClient creates a new QueryElasticsearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryElasticsearchParamsWithHTTPClient(client *http.Client) *QueryElasticsearchParams {
	var ()
	return &QueryElasticsearchParams{
		HTTPClient: client,
	}
}

/*QueryElasticsearchParams contains all the parameters to send to the API endpoint
for the query elasticsearch operation typically these are written to a http.Request
*/
type QueryElasticsearchParams struct {

	/*Deleted
	  Wherever include deleted nodes or not, possible values:  0 Exclude deleted 1 Only deleted 2 Include deleted.

	*/
	Deleted *float64
	/*Query
	  Elasticsearch query as JSON

	*/
	Query string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query elasticsearch params
func (o *QueryElasticsearchParams) WithTimeout(timeout time.Duration) *QueryElasticsearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query elasticsearch params
func (o *QueryElasticsearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query elasticsearch params
func (o *QueryElasticsearchParams) WithContext(ctx context.Context) *QueryElasticsearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query elasticsearch params
func (o *QueryElasticsearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query elasticsearch params
func (o *QueryElasticsearchParams) WithHTTPClient(client *http.Client) *QueryElasticsearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query elasticsearch params
func (o *QueryElasticsearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleted adds the deleted to the query elasticsearch params
func (o *QueryElasticsearchParams) WithDeleted(deleted *float64) *QueryElasticsearchParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the query elasticsearch params
func (o *QueryElasticsearchParams) SetDeleted(deleted *float64) {
	o.Deleted = deleted
}

// WithQuery adds the query to the query elasticsearch params
func (o *QueryElasticsearchParams) WithQuery(query string) *QueryElasticsearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the query elasticsearch params
func (o *QueryElasticsearchParams) SetQuery(query string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *QueryElasticsearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted float64
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatFloat64(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
