// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// NewShareCollectionParams creates a new ShareCollectionParams object
// with the default values initialized.
func NewShareCollectionParams() *ShareCollectionParams {
	var ()
	return &ShareCollectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewShareCollectionParamsWithTimeout creates a new ShareCollectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewShareCollectionParamsWithTimeout(timeout time.Duration) *ShareCollectionParams {
	var ()
	return &ShareCollectionParams{

		timeout: timeout,
	}
}

// NewShareCollectionParamsWithContext creates a new ShareCollectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewShareCollectionParamsWithContext(ctx context.Context) *ShareCollectionParams {
	var ()
	return &ShareCollectionParams{

		Context: ctx,
	}
}

// NewShareCollectionParamsWithHTTPClient creates a new ShareCollectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewShareCollectionParamsWithHTTPClient(client *http.Client) *ShareCollectionParams {
	var ()
	return &ShareCollectionParams{
		HTTPClient: client,
	}
}

/*ShareCollectionParams contains all the parameters to send to the API endpoint
for the share collection operation typically these are written to a http.Request
*/
type ShareCollectionParams struct {

	/*Body
	  Create a new share from an existing collection

	*/
	Body *models.CoreV2Share
	/*Collection
	  Collection identifier

	*/
	Collection string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the share collection params
func (o *ShareCollectionParams) WithTimeout(timeout time.Duration) *ShareCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the share collection params
func (o *ShareCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the share collection params
func (o *ShareCollectionParams) WithContext(ctx context.Context) *ShareCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the share collection params
func (o *ShareCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the share collection params
func (o *ShareCollectionParams) WithHTTPClient(client *http.Client) *ShareCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the share collection params
func (o *ShareCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the share collection params
func (o *ShareCollectionParams) WithBody(body *models.CoreV2Share) *ShareCollectionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the share collection params
func (o *ShareCollectionParams) SetBody(body *models.CoreV2Share) {
	o.Body = body
}

// WithCollection adds the collection to the share collection params
func (o *ShareCollectionParams) WithCollection(collection string) *ShareCollectionParams {
	o.SetCollection(collection)
	return o
}

// SetCollection adds the collection to the share collection params
func (o *ShareCollectionParams) SetCollection(collection string) {
	o.Collection = collection
}

// WriteToRequest writes these params to a swagger request
func (o *ShareCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param collection
	if err := r.SetPathParam("collection", o.Collection); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
