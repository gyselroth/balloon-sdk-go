// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// UploadFileReader is a Reader for the UploadFile structure.
type UploadFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadFileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUploadFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadFileCreated creates a UploadFileCreated with default headers values
func NewUploadFileCreated() *UploadFileCreated {
	return &UploadFileCreated{}
}

/*UploadFileCreated handles this case with default header values.

File created
*/
type UploadFileCreated struct {
	Payload *models.CoreV2File
}

func (o *UploadFileCreated) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileCreated  %+v", 201, o.Payload)
}

func (o *UploadFileCreated) GetPayload() *models.CoreV2File {
	return o.Payload
}

func (o *UploadFileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileBadRequest creates a UploadFileBadRequest with default headers values
func NewUploadFileBadRequest() *UploadFileBadRequest {
	return &UploadFileBadRequest{}
}

/*UploadFileBadRequest handles this case with default header values.

Bad Reqeust
*/
type UploadFileBadRequest struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileBadRequest  %+v", 400, o.Payload)
}

func (o *UploadFileBadRequest) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileUnauthorized creates a UploadFileUnauthorized with default headers values
func NewUploadFileUnauthorized() *UploadFileUnauthorized {
	return &UploadFileUnauthorized{}
}

/*UploadFileUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadFileUnauthorized struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadFileUnauthorized) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileForbidden creates a UploadFileForbidden with default headers values
func NewUploadFileForbidden() *UploadFileForbidden {
	return &UploadFileForbidden{}
}

/*UploadFileForbidden handles this case with default header values.

Forbidden
*/
type UploadFileForbidden struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileForbidden  %+v", 403, o.Payload)
}

func (o *UploadFileForbidden) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileNotFound creates a UploadFileNotFound with default headers values
func NewUploadFileNotFound() *UploadFileNotFound {
	return &UploadFileNotFound{}
}

/*UploadFileNotFound handles this case with default header values.

The specified resource was not found
*/
type UploadFileNotFound struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileNotFound  %+v", 404, o.Payload)
}

func (o *UploadFileNotFound) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileUnprocessableEntity creates a UploadFileUnprocessableEntity with default headers values
func NewUploadFileUnprocessableEntity() *UploadFileUnprocessableEntity {
	return &UploadFileUnprocessableEntity{}
}

/*UploadFileUnprocessableEntity handles this case with default header values.

Unauthorized
*/
type UploadFileUnprocessableEntity struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UploadFileUnprocessableEntity) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileInternalServerError creates a UploadFileInternalServerError with default headers values
func NewUploadFileInternalServerError() *UploadFileInternalServerError {
	return &UploadFileInternalServerError{}
}

/*UploadFileInternalServerError handles this case with default header values.

Internal Server Error
*/
type UploadFileInternalServerError struct {
	Payload *models.CoreV2Error
}

func (o *UploadFileInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files][%d] uploadFileInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadFileInternalServerError) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
