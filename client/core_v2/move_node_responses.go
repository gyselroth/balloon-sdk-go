// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// MoveNodeReader is a Reader for the MoveNode structure.
type MoveNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewMoveNodeMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewMoveNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMoveNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMoveNodeOK creates a MoveNodeOK with default headers values
func NewMoveNodeOK() *MoveNodeOK {
	return &MoveNodeOK{}
}

/*MoveNodeOK handles this case with default header values.

Node
*/
type MoveNodeOK struct {
	Payload *models.CoreV2Node
}

func (o *MoveNodeOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/move][%d] moveNodeOK  %+v", 200, o.Payload)
}

func (o *MoveNodeOK) GetPayload() *models.CoreV2Node {
	return o.Payload
}

func (o *MoveNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Node)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveNodeMultiStatus creates a MoveNodeMultiStatus with default headers values
func NewMoveNodeMultiStatus() *MoveNodeMultiStatus {
	return &MoveNodeMultiStatus{}
}

/*MoveNodeMultiStatus handles this case with default header values.

Multi status if batch request
*/
type MoveNodeMultiStatus struct {
}

func (o *MoveNodeMultiStatus) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/move][%d] moveNodeMultiStatus ", 207)
}

func (o *MoveNodeMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMoveNodeForbidden creates a MoveNodeForbidden with default headers values
func NewMoveNodeForbidden() *MoveNodeForbidden {
	return &MoveNodeForbidden{}
}

/*MoveNodeForbidden handles this case with default header values.

Access denied
*/
type MoveNodeForbidden struct {
}

func (o *MoveNodeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/move][%d] moveNodeForbidden ", 403)
}

func (o *MoveNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMoveNodeNotFound creates a MoveNodeNotFound with default headers values
func NewMoveNodeNotFound() *MoveNodeNotFound {
	return &MoveNodeNotFound{}
}

/*MoveNodeNotFound handles this case with default header values.

Resource does not exists
*/
type MoveNodeNotFound struct {
}

func (o *MoveNodeNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/move][%d] moveNodeNotFound ", 404)
}

func (o *MoveNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
