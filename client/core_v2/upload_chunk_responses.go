// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// UploadChunkReader is a Reader for the UploadChunk structure.
type UploadChunkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadChunkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadChunkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUploadChunkCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 206:
		result := NewUploadChunkPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadChunkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadChunkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadChunkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadChunkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUploadChunkUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadChunkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadChunkOK creates a UploadChunkOK with default headers values
func NewUploadChunkOK() *UploadChunkOK {
	return &UploadChunkOK{}
}

/*UploadChunkOK handles this case with default header values.

File updated
*/
type UploadChunkOK struct {
	Payload *models.CoreV2File
}

func (o *UploadChunkOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkOK  %+v", 200, o.Payload)
}

func (o *UploadChunkOK) GetPayload() *models.CoreV2File {
	return o.Payload
}

func (o *UploadChunkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkCreated creates a UploadChunkCreated with default headers values
func NewUploadChunkCreated() *UploadChunkCreated {
	return &UploadChunkCreated{}
}

/*UploadChunkCreated handles this case with default header values.

File newly created
*/
type UploadChunkCreated struct {
	Payload *models.CoreV2File
}

func (o *UploadChunkCreated) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkCreated  %+v", 201, o.Payload)
}

func (o *UploadChunkCreated) GetPayload() *models.CoreV2File {
	return o.Payload
}

func (o *UploadChunkCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkPartialContent creates a UploadChunkPartialContent with default headers values
func NewUploadChunkPartialContent() *UploadChunkPartialContent {
	return &UploadChunkPartialContent{}
}

/*UploadChunkPartialContent handles this case with default header values.

Chunk uploaded
*/
type UploadChunkPartialContent struct {
	Payload *models.CoreV2ChunkSession
}

func (o *UploadChunkPartialContent) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkPartialContent  %+v", 206, o.Payload)
}

func (o *UploadChunkPartialContent) GetPayload() *models.CoreV2ChunkSession {
	return o.Payload
}

func (o *UploadChunkPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2ChunkSession)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkBadRequest creates a UploadChunkBadRequest with default headers values
func NewUploadChunkBadRequest() *UploadChunkBadRequest {
	return &UploadChunkBadRequest{}
}

/*UploadChunkBadRequest handles this case with default header values.

Bad Reqeust
*/
type UploadChunkBadRequest struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkBadRequest  %+v", 400, o.Payload)
}

func (o *UploadChunkBadRequest) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkUnauthorized creates a UploadChunkUnauthorized with default headers values
func NewUploadChunkUnauthorized() *UploadChunkUnauthorized {
	return &UploadChunkUnauthorized{}
}

/*UploadChunkUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadChunkUnauthorized struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadChunkUnauthorized) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkForbidden creates a UploadChunkForbidden with default headers values
func NewUploadChunkForbidden() *UploadChunkForbidden {
	return &UploadChunkForbidden{}
}

/*UploadChunkForbidden handles this case with default header values.

Forbidden
*/
type UploadChunkForbidden struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkForbidden  %+v", 403, o.Payload)
}

func (o *UploadChunkForbidden) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkNotFound creates a UploadChunkNotFound with default headers values
func NewUploadChunkNotFound() *UploadChunkNotFound {
	return &UploadChunkNotFound{}
}

/*UploadChunkNotFound handles this case with default header values.

The specified resource was not found
*/
type UploadChunkNotFound struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkNotFound  %+v", 404, o.Payload)
}

func (o *UploadChunkNotFound) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkUnprocessableEntity creates a UploadChunkUnprocessableEntity with default headers values
func NewUploadChunkUnprocessableEntity() *UploadChunkUnprocessableEntity {
	return &UploadChunkUnprocessableEntity{}
}

/*UploadChunkUnprocessableEntity handles this case with default header values.

Unauthorized
*/
type UploadChunkUnprocessableEntity struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UploadChunkUnprocessableEntity) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkInternalServerError creates a UploadChunkInternalServerError with default headers values
func NewUploadChunkInternalServerError() *UploadChunkInternalServerError {
	return &UploadChunkInternalServerError{}
}

/*UploadChunkInternalServerError handles this case with default header values.

Internal Server Error
*/
type UploadChunkInternalServerError struct {
	Payload *models.CoreV2Error
}

func (o *UploadChunkInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/files/chunk][%d] uploadChunkInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadChunkInternalServerError) GetPayload() *models.CoreV2Error {
	return o.Payload
}

func (o *UploadChunkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
