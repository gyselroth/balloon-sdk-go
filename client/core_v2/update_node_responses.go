// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// UpdateNodeReader is a Reader for the UpdateNode structure.
type UpdateNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateNodeOK creates a UpdateNodeOK with default headers values
func NewUpdateNodeOK() *UpdateNodeOK {
	return &UpdateNodeOK{}
}

/*UpdateNodeOK handles this case with default header values.

Node
*/
type UpdateNodeOK struct {
	Payload *models.CoreV2Node
}

func (o *UpdateNodeOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/nodes/{node}][%d] updateNodeOK  %+v", 200, o.Payload)
}

func (o *UpdateNodeOK) GetPayload() *models.CoreV2Node {
	return o.Payload
}

func (o *UpdateNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Node)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNodeForbidden creates a UpdateNodeForbidden with default headers values
func NewUpdateNodeForbidden() *UpdateNodeForbidden {
	return &UpdateNodeForbidden{}
}

/*UpdateNodeForbidden handles this case with default header values.

Access denied
*/
type UpdateNodeForbidden struct {
}

func (o *UpdateNodeForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/nodes/{node}][%d] updateNodeForbidden ", 403)
}

func (o *UpdateNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNodeNotFound creates a UpdateNodeNotFound with default headers values
func NewUpdateNodeNotFound() *UpdateNodeNotFound {
	return &UpdateNodeNotFound{}
}

/*UpdateNodeNotFound handles this case with default header values.

Resource does not exists
*/
type UpdateNodeNotFound struct {
}

func (o *UpdateNodeNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/nodes/{node}][%d] updateNodeNotFound ", 404)
}

func (o *UpdateNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
