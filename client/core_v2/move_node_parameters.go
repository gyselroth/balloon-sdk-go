// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMoveNodeParams creates a new MoveNodeParams object
// with the default values initialized.
func NewMoveNodeParams() *MoveNodeParams {
	var (
		conflictDefault = float64(0)
	)
	return &MoveNodeParams{
		Conflict: &conflictDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewMoveNodeParamsWithTimeout creates a new MoveNodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMoveNodeParamsWithTimeout(timeout time.Duration) *MoveNodeParams {
	var (
		conflictDefault = float64(0)
	)
	return &MoveNodeParams{
		Conflict: &conflictDefault,

		timeout: timeout,
	}
}

// NewMoveNodeParamsWithContext creates a new MoveNodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewMoveNodeParamsWithContext(ctx context.Context) *MoveNodeParams {
	var (
		conflictDefault = float64(0)
	)
	return &MoveNodeParams{
		Conflict: &conflictDefault,

		Context: ctx,
	}
}

// NewMoveNodeParamsWithHTTPClient creates a new MoveNodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMoveNodeParamsWithHTTPClient(client *http.Client) *MoveNodeParams {
	var (
		conflictDefault = float64(0)
	)
	return &MoveNodeParams{
		Conflict:   &conflictDefault,
		HTTPClient: client,
	}
}

/*MoveNodeParams contains all the parameters to send to the API endpoint
for the move node operation typically these are written to a http.Request
*/
type MoveNodeParams struct {

	/*Conflict
	  Conflict resolution

	*/
	Conflict *float64
	/*Destid
	  Destination collection, if this is null root is taken

	*/
	Destid *string
	/*Node
	  Node identifier

	*/
	Node string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the move node params
func (o *MoveNodeParams) WithTimeout(timeout time.Duration) *MoveNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the move node params
func (o *MoveNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the move node params
func (o *MoveNodeParams) WithContext(ctx context.Context) *MoveNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the move node params
func (o *MoveNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the move node params
func (o *MoveNodeParams) WithHTTPClient(client *http.Client) *MoveNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the move node params
func (o *MoveNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConflict adds the conflict to the move node params
func (o *MoveNodeParams) WithConflict(conflict *float64) *MoveNodeParams {
	o.SetConflict(conflict)
	return o
}

// SetConflict adds the conflict to the move node params
func (o *MoveNodeParams) SetConflict(conflict *float64) {
	o.Conflict = conflict
}

// WithDestid adds the destid to the move node params
func (o *MoveNodeParams) WithDestid(destid *string) *MoveNodeParams {
	o.SetDestid(destid)
	return o
}

// SetDestid adds the destid to the move node params
func (o *MoveNodeParams) SetDestid(destid *string) {
	o.Destid = destid
}

// WithNode adds the node to the move node params
func (o *MoveNodeParams) WithNode(node string) *MoveNodeParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the move node params
func (o *MoveNodeParams) SetNode(node string) {
	o.Node = node
}

// WriteToRequest writes these params to a swagger request
func (o *MoveNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Conflict != nil {

		// query param conflict
		var qrConflict float64
		if o.Conflict != nil {
			qrConflict = *o.Conflict
		}
		qConflict := swag.FormatFloat64(qrConflict)
		if qConflict != "" {
			if err := r.SetQueryParam("conflict", qConflict); err != nil {
				return err
			}
		}

	}

	if o.Destid != nil {

		// query param destid
		var qrDestid string
		if o.Destid != nil {
			qrDestid = *o.Destid
		}
		qDestid := qrDestid
		if qDestid != "" {
			if err := r.SetQueryParam("destid", qDestid); err != nil {
				return err
			}
		}

	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
