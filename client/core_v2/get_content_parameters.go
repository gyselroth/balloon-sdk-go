// Code generated by go-swagger; DO NOT EDIT.

package core_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContentParams creates a new GetContentParams object
// with the default values initialized.
func NewGetContentParams() *GetContentParams {
	var (
		downloadDefault = bool(false)
	)
	return &GetContentParams{
		Download: &downloadDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentParamsWithTimeout creates a new GetContentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContentParamsWithTimeout(timeout time.Duration) *GetContentParams {
	var (
		downloadDefault = bool(false)
	)
	return &GetContentParams{
		Download: &downloadDefault,

		timeout: timeout,
	}
}

// NewGetContentParamsWithContext creates a new GetContentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContentParamsWithContext(ctx context.Context) *GetContentParams {
	var (
		downloadDefault = bool(false)
	)
	return &GetContentParams{
		Download: &downloadDefault,

		Context: ctx,
	}
}

// NewGetContentParamsWithHTTPClient creates a new GetContentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContentParamsWithHTTPClient(client *http.Client) *GetContentParams {
	var (
		downloadDefault = bool(false)
	)
	return &GetContentParams{
		Download:   &downloadDefault,
		HTTPClient: client,
	}
}

/*GetContentParams contains all the parameters to send to the API endpoint
for the get content operation typically these are written to a http.Request
*/
type GetContentParams struct {

	/*ByteRanges
	  Read stream from a specific offset/limit in bytes

	*/
	ByteRanges *float64
	/*Download
	  Force download file (Content-Disposition: attachment HTTP header)

	*/
	Download *bool
	/*Encode
	  Can be set to base64 to encode content as base64.

	*/
	Encode *string
	/*Node
	  Node identifier

	*/
	Node string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get content params
func (o *GetContentParams) WithTimeout(timeout time.Duration) *GetContentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content params
func (o *GetContentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content params
func (o *GetContentParams) WithContext(ctx context.Context) *GetContentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content params
func (o *GetContentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content params
func (o *GetContentParams) WithHTTPClient(client *http.Client) *GetContentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content params
func (o *GetContentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithByteRanges adds the byteRanges to the get content params
func (o *GetContentParams) WithByteRanges(byteRanges *float64) *GetContentParams {
	o.SetByteRanges(byteRanges)
	return o
}

// SetByteRanges adds the byteRanges to the get content params
func (o *GetContentParams) SetByteRanges(byteRanges *float64) {
	o.ByteRanges = byteRanges
}

// WithDownload adds the download to the get content params
func (o *GetContentParams) WithDownload(download *bool) *GetContentParams {
	o.SetDownload(download)
	return o
}

// SetDownload adds the download to the get content params
func (o *GetContentParams) SetDownload(download *bool) {
	o.Download = download
}

// WithEncode adds the encode to the get content params
func (o *GetContentParams) WithEncode(encode *string) *GetContentParams {
	o.SetEncode(encode)
	return o
}

// SetEncode adds the encode to the get content params
func (o *GetContentParams) SetEncode(encode *string) {
	o.Encode = encode
}

// WithNode adds the node to the get content params
func (o *GetContentParams) WithNode(node string) *GetContentParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the get content params
func (o *GetContentParams) SetNode(node string) {
	o.Node = node
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ByteRanges != nil {

		// header param Byte-Ranges
		if err := r.SetHeaderParam("Byte-Ranges", swag.FormatFloat64(*o.ByteRanges)); err != nil {
			return err
		}

	}

	if o.Download != nil {

		// query param download
		var qrDownload bool
		if o.Download != nil {
			qrDownload = *o.Download
		}
		qDownload := swag.FormatBool(qrDownload)
		if qDownload != "" {
			if err := r.SetQueryParam("download", qDownload); err != nil {
				return err
			}
		}

	}

	if o.Encode != nil {

		// query param encode
		var qrEncode string
		if o.Encode != nil {
			qrEncode = *o.Encode
		}
		qEncode := qrEncode
		if qEncode != "" {
			if err := r.SetQueryParam("encode", qEncode); err != nil {
				return err
			}
		}

	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
