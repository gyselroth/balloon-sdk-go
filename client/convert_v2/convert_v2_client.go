// Code generated by go-swagger; DO NOT EDIT.

package convert_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new convert v2 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for convert v2 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSlave adds new convert slave
*/
func (a *Client) AddSlave(params *AddSlaveParams, authInfo runtime.ClientAuthInfoWriter) (*AddSlaveAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSlaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSlave",
		Method:             "POST",
		PathPattern:        "/api/v2/files/{file}/convert/slaves",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddSlaveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSlaveAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSlave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSlave deletes slave
*/
func (a *Client) DeleteSlave(params *DeleteSlaveParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSlaveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSlaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSlave",
		Method:             "DELETE",
		PathPattern:        "/api/v2/files/{file}/convert/slaves/{slave}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSlaveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSlaveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSlave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSlave gets single slave
*/
func (a *Client) GetSlave(params *GetSlaveParams, authInfo runtime.ClientAuthInfoWriter) (*GetSlaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSlave",
		Method:             "GET",
		PathPattern:        "/api/v2/files/{file}/convert/slaves/{slave}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSlaveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSlave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSlaves gets existing convert slaves
*/
func (a *Client) GetSlaves(params *GetSlavesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSlavesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlavesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSlaves",
		Method:             "GET",
		PathPattern:        "/api/v2/files/{file}/convert/slaves",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSlavesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlavesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSlaves: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupportedFormats gets supported file formats to convert to formats do vary between files
*/
func (a *Client) GetSupportedFormats(params *GetSupportedFormatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSupportedFormatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedFormatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSupportedFormats",
		Method:             "GET",
		PathPattern:        "/api/v2/files/{file}/convert/supported-formats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSupportedFormatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedFormatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportedFormats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
