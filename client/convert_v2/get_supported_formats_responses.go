// Code generated by go-swagger; DO NOT EDIT.

package convert_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetSupportedFormatsReader is a Reader for the GetSupportedFormats structure.
type GetSupportedFormatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSupportedFormatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSupportedFormatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSupportedFormatsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSupportedFormatsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSupportedFormatsOK creates a GetSupportedFormatsOK with default headers values
func NewGetSupportedFormatsOK() *GetSupportedFormatsOK {
	return &GetSupportedFormatsOK{}
}

/*GetSupportedFormatsOK handles this case with default header values.

Formats
*/
type GetSupportedFormatsOK struct {
	Payload []string
}

func (o *GetSupportedFormatsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/files/{file}/convert/supported-formats][%d] getSupportedFormatsOK  %+v", 200, o.Payload)
}

func (o *GetSupportedFormatsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetSupportedFormatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupportedFormatsForbidden creates a GetSupportedFormatsForbidden with default headers values
func NewGetSupportedFormatsForbidden() *GetSupportedFormatsForbidden {
	return &GetSupportedFormatsForbidden{}
}

/*GetSupportedFormatsForbidden handles this case with default header values.

Access denied
*/
type GetSupportedFormatsForbidden struct {
}

func (o *GetSupportedFormatsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/files/{file}/convert/supported-formats][%d] getSupportedFormatsForbidden ", 403)
}

func (o *GetSupportedFormatsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupportedFormatsNotFound creates a GetSupportedFormatsNotFound with default headers values
func NewGetSupportedFormatsNotFound() *GetSupportedFormatsNotFound {
	return &GetSupportedFormatsNotFound{}
}

/*GetSupportedFormatsNotFound handles this case with default header values.

Resource does not exists
*/
type GetSupportedFormatsNotFound struct {
}

func (o *GetSupportedFormatsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/files/{file}/convert/supported-formats][%d] getSupportedFormatsNotFound ", 404)
}

func (o *GetSupportedFormatsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
