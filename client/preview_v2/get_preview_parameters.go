// Code generated by go-swagger; DO NOT EDIT.

package preview_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPreviewParams creates a new GetPreviewParams object
// with the default values initialized.
func NewGetPreviewParams() *GetPreviewParams {
	var ()
	return &GetPreviewParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPreviewParamsWithTimeout creates a new GetPreviewParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPreviewParamsWithTimeout(timeout time.Duration) *GetPreviewParams {
	var ()
	return &GetPreviewParams{

		timeout: timeout,
	}
}

// NewGetPreviewParamsWithContext creates a new GetPreviewParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPreviewParamsWithContext(ctx context.Context) *GetPreviewParams {
	var ()
	return &GetPreviewParams{

		Context: ctx,
	}
}

// NewGetPreviewParamsWithHTTPClient creates a new GetPreviewParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPreviewParamsWithHTTPClient(client *http.Client) *GetPreviewParams {
	var ()
	return &GetPreviewParams{
		HTTPClient: client,
	}
}

/*GetPreviewParams contains all the parameters to send to the API endpoint
for the get preview operation typically these are written to a http.Request
*/
type GetPreviewParams struct {

	/*Encode
	  Set to base64 to return a jpeg encoded preview as base64, else return it as jpeg binary

	*/
	Encode *string
	/*File
	  File identifier

	*/
	File string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get preview params
func (o *GetPreviewParams) WithTimeout(timeout time.Duration) *GetPreviewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get preview params
func (o *GetPreviewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get preview params
func (o *GetPreviewParams) WithContext(ctx context.Context) *GetPreviewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get preview params
func (o *GetPreviewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get preview params
func (o *GetPreviewParams) WithHTTPClient(client *http.Client) *GetPreviewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get preview params
func (o *GetPreviewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncode adds the encode to the get preview params
func (o *GetPreviewParams) WithEncode(encode *string) *GetPreviewParams {
	o.SetEncode(encode)
	return o
}

// SetEncode adds the encode to the get preview params
func (o *GetPreviewParams) SetEncode(encode *string) {
	o.Encode = encode
}

// WithFile adds the file to the get preview params
func (o *GetPreviewParams) WithFile(file string) *GetPreviewParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the get preview params
func (o *GetPreviewParams) SetFile(file string) {
	o.File = file
}

// WriteToRequest writes these params to a swagger request
func (o *GetPreviewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Encode != nil {

		// query param encode
		var qrEncode string
		if o.Encode != nil {
			qrEncode = *o.Encode
		}
		qEncode := qrEncode
		if qEncode != "" {
			if err := r.SetQueryParam("encode", qEncode); err != nil {
				return err
			}
		}

	}

	// path param file
	if err := r.SetPathParam("file", o.File); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
