// Code generated by go-swagger; DO NOT EDIT.

package notification_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gyselroth/balloon-sdk-go/models"
)

// SubscribeNodeReader is a Reader for the SubscribeNode structure.
type SubscribeNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscribeNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSubscribeNodeAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSubscribeNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscribeNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSubscribeNodeAccepted creates a SubscribeNodeAccepted with default headers values
func NewSubscribeNodeAccepted() *SubscribeNodeAccepted {
	return &SubscribeNodeAccepted{}
}

/*SubscribeNodeAccepted handles this case with default header values.

Node
*/
type SubscribeNodeAccepted struct {
	Payload *models.CoreV2Node
}

func (o *SubscribeNodeAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/subscription][%d] subscribeNodeAccepted  %+v", 202, o.Payload)
}

func (o *SubscribeNodeAccepted) GetPayload() *models.CoreV2Node {
	return o.Payload
}

func (o *SubscribeNodeAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoreV2Node)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeNodeForbidden creates a SubscribeNodeForbidden with default headers values
func NewSubscribeNodeForbidden() *SubscribeNodeForbidden {
	return &SubscribeNodeForbidden{}
}

/*SubscribeNodeForbidden handles this case with default header values.

Access denied
*/
type SubscribeNodeForbidden struct {
}

func (o *SubscribeNodeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/subscription][%d] subscribeNodeForbidden ", 403)
}

func (o *SubscribeNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubscribeNodeNotFound creates a SubscribeNodeNotFound with default headers values
func NewSubscribeNodeNotFound() *SubscribeNodeNotFound {
	return &SubscribeNodeNotFound{}
}

/*SubscribeNodeNotFound handles this case with default header values.

Resource does not exists
*/
type SubscribeNodeNotFound struct {
}

func (o *SubscribeNodeNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/nodes/{node}/subscription][%d] subscribeNodeNotFound ", 404)
}

func (o *SubscribeNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
