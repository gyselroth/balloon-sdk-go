// Code generated by go-swagger; DO NOT EDIT.

package sharelink_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateLinkParams creates a new CreateLinkParams object
// with the default values initialized.
func NewCreateLinkParams() *CreateLinkParams {
	var (
		expirationDefault = float64(0)
	)
	return &CreateLinkParams{
		Expiration: &expirationDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLinkParamsWithTimeout creates a new CreateLinkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLinkParamsWithTimeout(timeout time.Duration) *CreateLinkParams {
	var (
		expirationDefault = float64(0)
	)
	return &CreateLinkParams{
		Expiration: &expirationDefault,

		timeout: timeout,
	}
}

// NewCreateLinkParamsWithContext creates a new CreateLinkParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLinkParamsWithContext(ctx context.Context) *CreateLinkParams {
	var (
		expirationDefault = float64(0)
	)
	return &CreateLinkParams{
		Expiration: &expirationDefault,

		Context: ctx,
	}
}

// NewCreateLinkParamsWithHTTPClient creates a new CreateLinkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLinkParamsWithHTTPClient(client *http.Client) *CreateLinkParams {
	var (
		expirationDefault = float64(0)
	)
	return &CreateLinkParams{
		Expiration: &expirationDefault,
		HTTPClient: client,
	}
}

/*CreateLinkParams contains all the parameters to send to the API endpoint
for the create link operation typically these are written to a http.Request
*/
type CreateLinkParams struct {

	/*Expiration
	  Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire.

	*/
	Expiration *float64
	/*Node
	  Node identifier

	*/
	Node string
	/*Password
	  Optionally set a password to protect the public link.

	*/
	Password *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create link params
func (o *CreateLinkParams) WithTimeout(timeout time.Duration) *CreateLinkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create link params
func (o *CreateLinkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create link params
func (o *CreateLinkParams) WithContext(ctx context.Context) *CreateLinkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create link params
func (o *CreateLinkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create link params
func (o *CreateLinkParams) WithHTTPClient(client *http.Client) *CreateLinkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create link params
func (o *CreateLinkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpiration adds the expiration to the create link params
func (o *CreateLinkParams) WithExpiration(expiration *float64) *CreateLinkParams {
	o.SetExpiration(expiration)
	return o
}

// SetExpiration adds the expiration to the create link params
func (o *CreateLinkParams) SetExpiration(expiration *float64) {
	o.Expiration = expiration
}

// WithNode adds the node to the create link params
func (o *CreateLinkParams) WithNode(node string) *CreateLinkParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the create link params
func (o *CreateLinkParams) SetNode(node string) {
	o.Node = node
}

// WithPassword adds the password to the create link params
func (o *CreateLinkParams) WithPassword(password *string) *CreateLinkParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the create link params
func (o *CreateLinkParams) SetPassword(password *string) {
	o.Password = password
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLinkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Expiration != nil {

		// query param expiration
		var qrExpiration float64
		if o.Expiration != nil {
			qrExpiration = *o.Expiration
		}
		qExpiration := swag.FormatFloat64(qrExpiration)
		if qExpiration != "" {
			if err := r.SetQueryParam("expiration", qExpiration); err != nil {
				return err
			}
		}

	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	if o.Password != nil {

		// query param password
		var qrPassword string
		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {
			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
